Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для управління логістикою безпілотних фур

    Студент гр. ПЗПІ-21-4                __________________________ Білодід М.О.  
(підпис)

Керівник роботи                        _____________________ доц.Лещинська І.О.
(підпис)
Роботу захищено «__»_________2024 р.
з оцінкою _________________________

    Комісія:                                     ___________________ доц. Лещинський В.О.
(підпис)
_____________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)


Харків
2024 р.

Аркуш Завдання

Харківський національний університет радіоелектроніки  

Факультет комп’ютерних наук            Кафедра програмної інженерії                 
Спеціальність 121 – Інженерія програмного забезпечення                                   
Курс             3           Семестр                                          6                                        
Навчальна дисципліна Архітектура програмного забезпечення                          

ЗАВДАННЯ 
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ
                                     Білодіду Михайлу Олександровичу                                    
1. Тема проєкту: Програмна система для управління логістикою безпілотних фур                                                                                                                                
2. Термін узгодження курсової роботи  « 1 »    квітня  2024 р. 
3. Термін здачі студентом закінченої роботи  «     »                       2024 р.  
4. Вихідні дані до проєкту: Програмна система має реалізовувати використання IoT-трекерів геопозиції та програмного забезпечення для керування логістикою автономних фур. Система має забезпечувати безпеку даних, включати інструменти адміністрування та бути орієнтована на масового користувача. 
5. Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки                                                                                                                             
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси)  ER-модель даних, діаграма варіантів використання, діаграма розгортання, інтерфейс додатку                                                                                                                         

КАЛЕНДАРНИЙ ПЛАН


№	Назва етапу курсової роботи	Термін виконання	Примітка
1	Функціональна специфікація
програмного проєкту	26.02.2024 - 01.04.2024 р.	виконано
2	Проєктування програмного
проекту	01.04.2024 - 15.04.2024 р.	виконано
3	Кодування програмного проєкту	15.04.2024 - 29.05.2024 р.	виконано
4	Оформлення пояснювальної
записки	30.05.2022 - 05.06.2024 р.	виконано
5	Захист курсової роботи	06.06.2024 - 08.06.2024 р.	виконано


Дата видачі теми проєкту «   1   »         квітня         2024 р.  

Керівник                                                                    доц.Лещинська І.О.
  					  	(підпис)  

Завдання прийняв до виконання 
ст.гр. ПЗПІ-21-4                                                         Білодід М.О.    
  					  	    (підпис)  






РЕФЕРАТ


Пояснювальна записка до курсової роботи: с. 34, рис. 5, табл. 3, додатки 1, джерел 7.
ФУРА, ЛОГІСТИКА, БЕНЗИН, ТОЧКА КООРДИНАТ, ЗАМОВЛЕННЯ, КОМПАНІЯ, ВАНТАЖ.
Об'єктом дослідження курсової роботи є логістичні компанії, які надають послуги з вантажних перевезень та використовують або планують використати безпілотні фури. Найбільша увага приділяється саме логістиці. Також розглядається можлива статистика, яка буде потрібна для управління компанією, методи монетизації системи, актуальні проблеми та потреби у сфері вантажних перевезень.
Метою курсової роботи є підвищення ефективності управління транспортною компанією та поліпшення логістики. Система дозволяє керувати фурами, замовленнями, персоналом, автоматично підбирати найкращий вантаж з огляду на логістику та переглядати статистику транспортної, яка дозволить ухвалювати правильні рішення з менеджменту. Також до мети відноситься розробка такої системи. 
Методи розробки курсової роботи включають методи розробки серверної частини, а саме мова програмування C# та .NET фреймворк, для бази даних СУБД MongoDB, для клієнтського додатку мова програмування TypeScript та фреймворк Angular, а також мова розмітник веб-сторінок HTML та мова стилів для веб-сторінок CSS, для IoT-пристрою це комп’ютер Raspberry Pi та мова програмування Python та для мобільного додатку це мова програмування для розробки мобільних додатків під різні архітектури мобільних пристроїв - Flutter.
У результаті роботи створено систему для управління логістикою безпілотних фур для транспортних компаній. Було розроблено серверну частину та базу даних для системи.
ЗМІСТ


Вступ	5
1 Аналіз та концептуальне моделювання предметної області 	6
1.1 Бізнес-вимоги	6
1.1.1 Бізнес можливості	6
1.1.2 Бізнес-цілі та критерії успіху	7
1.1.3 Потреби клієнтів або ринку	8
1.1.4 Бізнес-ризики	10
1.2 Концепція рішення	11
1.2.1 Окреслення концепції	11
1.2.2 Головна функціональність	12
1.2.3 Припущення та залежності	13
1.3 Рамки та обмеження проєкту	14
1.3.1 Рамки первинного випуску	14
1.3.2 Рамки наступних випусків	15
1.3.3 Обмеження та винятки	16
1.4 Бізнес-контекст	16
1.4.1 Профілі зацікавлених сторін	16
1.4.2 Пріоритети проєкту	17
1.4.3 Робоче середовище	18
2 Постановка задачі	20
3 Проектування програмного проєкту	21
3.1 Проектування серверної частини проєкту	21
4 Кодування програмного проєкту	26
4.1 Кодування серверної частини проєкту	26
Висновки	29
Перелік джерел посилання	30
Додаток А. Код серверної частини	31



ВСТУП


У сучасному світі логістика відіграє ключову роль у забезпеченні ефективного функціонування економіки. Зі зростанням обсягів вантажних перевезень виникає потреба в інноваційних підходах до управління транспортними засобами та організації логістичних процесів. Одним з найперспективніших напрямів є впровадження безпілотних фур, які можуть забезпечити автономне виконання логістичних операцій та значно скоротити витрати на транспортування.
Традиційні методи управління фурами вимагають постійного залучення людських ресурсів, що призводить до значних витрат на оплату праці, ризиків пов'язаних з людським фактором, а також обмеженості у часі та просторі. Безпілотні фури, керовані за допомогою спеціалізованих програмних систем, здатні вирішити ці проблеми, забезпечуючи безперервну роботу та оптимізацію маршрутів у режимі реального часу. Однак для ефективного функціонування такої системи необхідно розробити інтегровану платформу, яка забезпечить управління компанією, координацію вантажів та обробку замовлень.
Основною метою розробки системи управління логістикою безпілотних фур є підвищення ефективності роботи транспортних компаній, зниження експлуатаційних витрат та покращення якості обслуговування клієнтів. Система надає можливість автоматизувати процеси планування маршрутів, управління вантажами та моніторингу стану транспортних засобів, що дозволяє значно скоротити час виконання логістичних операцій та підвищити точність доставки.
Таким чином, розробка та впровадження системи управління логістикою безпілотних фур відкриває нові можливості для оптимізації логістичних процесів та підвищення конкурентоспроможності транспортних компаній у сучасних умовах швидко змінюваного ринку.
1 АНАЛІЗ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес можливості


Аналізуючи конкурентну ситуацію на ринку автономних вантажівок, варто відзначити кількох основних гравців, які активно працюють над вдосконаленням та впровадженням подібних технологій. "Starsky Robotics", "Tesla Semi" [1], та "Daimler" вже мають свої розробки у цій області, проте існують можливості для створення продукту, який відзначатиметься рядом конкурентних переваг.
Однією з переваг нашої програмної системи буде можливість автоматичного підбору замовлення для вантажівки. Диспетчеру потрібно буде просто натиснути на кнопку і він отримає замовлення, що буде найближче до вільної фури, та матиме вагу, яку зможе перемістити фура. Такої функції в конкурентів на даний момент немає.
Також вагомою перевагою є те, ще систему можна встановити на будь-які безпілотні фури. Придбавши фури одного з вище перелічених конкурентів, компанія зможе використовувати лише їх систему, що робить клієнтів заручниками ситуації. Клієнт не зможе обрати іншу фірму для отримання системи. Але він зможе придбати нашу систему та бути незалежним від компанії-виробника фур. 
Щодо моделі монетизації, ми розглядаємо можливість використання комбінованих тарифних планів, які будуть враховувати обсяг перевезень, час використання системи та додаткові сервіси, такі як моніторинг вантажу та навігаційна підтримка. Це дозволить нам пропонувати гнучкі та індивідуалізовані рішення для різних клієнтів, забезпечуючи оптимальний баланс між вартістю та якістю обслуговування.
Наш продукт орієнтований на ринок логістики та перевезень, де велика потреба у вдосконаленні та автоматизації процесів. З урахуванням тенденції до зростання електронної комерції та збільшення обсягів вантажоперевезень, ми впевнені в перспективності нашого продукту на цьому ринку.
Загалом, наш продукт має потенціал стати ключовим інструментом для оптимізації логістичних процесів та підвищення ефективності вантажних перевезень. Його впровадження може стати стратегічним кроком для підприємств, що прагнуть підвищити свою конкурентоспроможність та забезпечити стабільний ріст у сучасному конкурентному середовищі.


1.1.2	Бізнес-цілі та критерії успіху


Головною метою виступає підвищення ефективності управління логістичними процесами в транспортних компаніях за допомогою впровадження системи управління безпілотними фурами. Система дозволяє автоматизувати планування маршрутів, управління вантажами та обробку замовлень, що призводить до оптимізації використання ресурсів, зниження експлуатаційних витрат та підвищення точності і швидкості доставки.
Бізнес-цілі:
BO-1: Зниження витрат на логістичні операції. Головною бізнес-ціллю проєкту є зниження витрат на обслуговування логістики безпілотних фур. Планується досягти зменшення витрат не менше ніж на 25% протягом першого року експлуатації системи.
BO-2: Підвищення ефективності доставок. Однією з ключових цілей є підвищення ефективності доставок за допомогою автоматизації та оптимізації маршрутів. Ми плануємо досягти збільшення швидкості доставки не менше ніж на 20% протягом першого року роботи системи.
BO-3: Підвищення рівня задоволеності клієнтів до 85% за рахунок скорочення часу доставки та підвищення точності виконання замовлень. Задоволений клієнт – постійний клієнт. Якість системи впливатиме на імідж продукту.
Критерії успіху:
SC-1: Збільшення обсягу партнерства. Критерієм успіху є залучення не менше ніж 50 нових партнерів у перший рік експлуатації системи. Велика мережа партнерів дозволить розширити географію та обсяги доставок.
SC-2: Покращення безпеки та надійності. Ще одним важливим критерієм успіху є зменшення кількості аварій та інцидентів на дорогах за допомогою використання безпілотних фур. Планується досягти зменшення кількості аварій не менше ніж на 30% протягом першого року роботи системи.
SC-3: Підвищення задоволення клієнтів. Критерієм успіху є підвищення рівня задоволеності клієнтів з доставки товарів за допомогою безпілотних фур. Планується досягти показника не менше ніж 90% задоволеності клієнтів протягом першого року роботи системи.
	Для досягнення цілей і критеріїв успіху проекту, буде розроблено стратегію інтеграції системи в логістичні компанії з акцентом на адаптацію. Передбачено постійний моніторинг продуктивності для виявлення та усунення недоліків, а також регулярний збір відгуків користувачів для вдосконалення системи. Важливим аспектом є використання алгоритмів машинного навчання, що підвищують ефективність планування маршрутів і управління вантажами, забезпечуючи гнучкість і адаптацію системи до змін ринку.


1.1.3	Потреби клієнтів або ринку


Розроблювана програмна система для управління логістикою безпілотних фур спрямована на задоволення потреб клієнтів у сфері автоматизації та оптимізації логістичних процесів. Головними потребами ринку є:
1.	Ефективне управління доставками: Клієнти очікують від програмної системи можливості планування та оптимізації маршрутів, розподілу ресурсів та координації руху безпілотних фур для максимальної ефективності доставок.
2.	Забезпечення безпеки: Безпека вантажів та надійність перевезень є ключовими аспектами для клієнтів. Система повинна забезпечити надійний моніторинг та керування безпілотними фурами, запобігаючи аваріям та непередбаченим ситуаціям на дорозі.
3.	Максимізація ефективності ресурсів: Клієнти очікують від системи можливості оптимізації використання ресурсів, зокрема палива, часу та людських ресурсів. Це дозволить знизити витрати та підвищити прибутковість логістичних операцій.
4.	Гнучкість та адаптивність: Ринок логістики постійно змінюється, тому програмна система повинна бути гнучкою та здатною адаптуватися до нових вимог та технологічних змін для задоволення потреб клієнтів.
5.	Інтеграція з існуючими системами: Клієнти очікують можливості інтеграції розроблюваної системи з їхніми власними програмними та апаратними рішеннями для забезпечення синхронізації та обміну даними безперебійно.
Загальний успіх програмного продукту буде визначатися його здатністю відповідати цим потребам ринку та забезпечувати високу якість та надійність управління логістикою безпілотних фур. Успішна реалізація проекту також створить потенціал для подальших інновацій у сфері автономних вантажних перевезень. Це може сприяти не лише підвищенню ефективності логістики, але й створенню нових стандартів у транспортній індустрії.


1.1.4	Бізнес-ризики


Під час розробки програмної системи управління логістикою безпілотних фур існують деякі потенційні ризики, які можуть вплинути на успішність проекту. До цих ризиків відносяться:
1. Конкуренція на ринку: Ринок автоматизованої логістики стає все більш насиченим, і конкуренція між різними постачальниками послуг може стати перешкодою для розвитку проєкту.
2. Технологічні обмеження: Технологічні обмеження, такі як недостатня точність сенсорів або обмежена місткість алгоритмів штучного інтелекту, можуть ускладнити реалізацію певних функціональних можливостей системи.
3. Правові обмеження: Наявність правових обмежень щодо використання безпілотних транспортних засобів може вплинути на швидкість впровадження системи та її можливості розвитку.
Для уникнення цих ризиків необхідно вжити наступні заходи:
1. Аналіз ринку та конкурентів: Проведення ретельного аналізу ринку та конкурентів допоможе зрозуміти сильні та слабкі сторони конкурентів і розробити стратегію, що дозволить виділитися на фоні конкуренції.
2. Неперервний моніторинг технологій: Постійне вдосконалення технологій та розробка альтернативних рішень допоможуть уникнути технологічних обмежень.
3. Співпраця з правовими експертами: Розробка системи відбувається в
тісному співробітництві з правовими експертами для забезпечення відповідності всіх аспектів роботи системи законодавству та регулятивним вимогам.


1.2	Концепція рішення 
1.2.1	Окреслення концепції


Smart Truck спрямована на забезпечення ефективного та безпечного управління транспортними засобами в умовах автоматизованої логістики. Головною метою є забезпечення клієнтів інструментом, який дозволить оптимізувати доставку вантажів, зменшити витрати та підвищити ефективність логістичних процесів.
Основні функції нашої програмної системи включають:
1.	Планування маршрутів: Система автоматично розраховує оптимальні маршрути для безпілотних фур та замовлення, враховуючи відстань до точки та шлях.
2.	Моніторинг та керування: Користувачі мають можливість в реальному часі відстежувати рух фур, отримувати повідомлення про статус доставки.
3.	Аналітика та звітність: Система забезпечує збір та аналіз даних про продуктивність фур, витрати палива, час доставки та інші ключові показники для підвищення ефективності логістичних процесів.
Наша система буде відрізнятися від інших на ринку завдяки:
1.	Високому рівню автоматизації та інтелектуалізації: Використання
передових технологій штучного інтелекту та машинного навчання дозволить системі автоматично адаптуватися до змінних умов та оптимізувати роботу фур.
2.	Гнучкості та масштабованості: Наша система буде гнучкою та легко
масштабованою, що дозволить інтегрувати її з різноманітними системами та відповідати на зростаючі потреби клієнтів.
3.	Високому рівню безпеки: Застосування передових методів
шифрування та захисту даних забезпечить високий рівень безпеки та надійності системи.
Аналіз потреб та вимог потенційних користувачів дозволить нам краще розуміти їхні потреби та відповідати на них. Інтеграція з іншими системами логістики та управління транспортом підвищить цінність нашого рішення для клієнтів та забезпечить більш широкий функціонал.
Система буде складатись з серверної частини, веб-додатку, мобільного додатку, додатку для адміністрування та IoT-частини, а саме з трекеру геопозиції для знаходження місця положення фури. 


1.2.2	Головна функціональність


MF-1: Підбір найкращого замовлення. На основі даних про місце вантажу та поточне місцезнаходження фури, обирається найкраще замовлення.
MF-2: Реєстрація та автентифікація користувачів. Система має надавати можливість користувачам створювати особисті облікові записи, реєструючись через електронну пошту та телефон.
MF-3: Аналітика та звітність. Забезпечує збір та аналіз даних про продуктивність фур, витрати палива, час доставки та інші ключові показники для підвищення ефективності логістичних процесів. Надає звіти та аналітику, що допомагають клієнтам у вдосконаленні їхнього бізнесу та прийнятті ефективних рішень.
MF-4: Заходи безпеки даних. Шифрування даних від користувача до сервера забезпечує конфіденційність інформації під час передачі. Контроль доступу до різних рівнів інформації та можливість налаштування прав доступу для кожного користувача.
MF-6: Можливості налаштування та адаптації. Система надає гнучкі налаштування для врахування індивідуальних потреб кожного логістичного центру, забезпечуючи оптимальне використання ресурсів та максимізацію продуктивності. 
MF-7: Трекінг. Користувачі можуть отримати інформацію про свої фури та їх стан у режимі реального часу.
MF-7 Резервне копіювання: Користувач може отримати резервну копію бази даних у вигляді csv-файлу.


1.2.3	Припущення та залежності


Припущення:
1.	Передбачається, що безпілотні фури будуть обладнані відповідною
апаратурою та програмним забезпеченням для забезпечення співпраці з розроблюваною системою управління логістикою.
2.	Припускається, що користувачі системи мають доступ до необхідних
комунікаційних мереж для забезпечення зв'язку з безпілотними фурами.
3.	Передбачається, що логістичні центри, які використовують систему,
мають достатні технічні можливості для інтеграції з розроблюваною програмною системою.
Залежності:
1. Інтеграція з GPS: Розробка системи управління логістикою залежить від доступності та точності GPS-даних для визначення маршрутів та місцезнаходження безпілотних фур. У разі відсутності сигналу від пристрою, що дозволяє знайти місцезнаходження фури, система буде працювати некоректно.
2. Залежність від технічної підтримки: Ефективне впровадження та функціонування системи потребує належної технічної підтримки та обслуговування. Також потрібна цілодобова наявність спеціалістів у разі виникнення неполадок.


1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску


Первинний випуск системи управління логістикою безпілотних фур орієнтований на забезпечення основних функцій для ефективного контролю і оптимізації логістичних операцій. На першому етапі впровадження система надаватиме базові можливості для автоматизації управління фурами та вантажами. Основні функції, включені в початковий випуск:
SIR-1: Реєстрація та авторизація користувачів. Реєстрація відбувається за поштою або номером телефону або за обома.
SIR-2: Додавання, видалення та редагування автопарку. 
SIR-3: Перегляд інформації про фуру. Також можна переглянути фури компанії.
SIR-4: Функціонал пошуку для фур та вантажів. Пошук відбувається за номером.
SIR-5: Сортування списку фур та вантажів за номером.
SIR-6: Перегляд користувацького профілю.
SIR-7: Редагування користувацької інформації та зміна паролю.
SIR-8: Вихід користувача з системи.
SIR-9: Управління користувачами. Доступно тільки адміністратору системи.
SIR-10: Функції резервного копіювання та відновлення.
SIR-11: Видалення аккаунту користувача.
SIR-12: Підтримка української та англійської мов.
SIR-13: Доступ до статистики.
SIR-14: Автоматичний підбір вантажу.


1.3.2	Рамки наступних випусків


Планується реалізація наступних функцій у майбутніх випусках:
SSR-1: Оптимізація маршрутів за допомогою алгоритмів штучного інтелекту та машинного навчання для зменшення часу доставки та витрат палива.
SSR-2: Впровадження системи моніторингу та прогнозування погодних умов для планування маршрутів у реальному часі.
SSR-3: Розширення можливостей аналізу даних для виявлення тенденцій у логістиці та підвищення ефективності оперативного управління.
SSR-4: Вдосконалення системи управління вантажами та ресурсами для забезпечення оптимального розподілу завдань між безпілотними фурами.
SSR-5: Інтеграція з системами інвентаризації та управління складом для автоматизації процесів замовлення та відвантаження товарів.
SSR-6: Розробка механізмів автоматичного оновлення та підтримки програмного забезпечення безпілотних фур для забезпечення їх безперебійної роботи.
SSR-7: Підтримка мультиплатформенності для роботи системи на різних пристроях та операційних системах.
SSR-8: Розширення наявної статистики системи. Дозволить побачити більш детальну інформацію та метрики компанії.
Ці функції відображають важливі напрямки розвитку системи управління логістикою безпілотних фур та сприятимуть покращенню ефективності та функціональності програмного продукту. Після реалізації цих функцій, наступний план буде окреслено завдяки аналізу ринку та відгуків наявних користувачів.
1.3.3	Обмеження та винятки


LE-1: Наявність стійкого та надійного Інтернет-з'єднання для забезпечення безперебійної роботи системи.
LE-2: Обмежена ефективність системи у поганих погодних умовах, таких як сильний дощ, снігопад або туман.
LE-3: Можливість непередбачуваних технічних проблем або збоїв у роботі безпілотних фур, що може призвести до відміни або затримки доставки.
LE-4: Винятком є ситуації, коли безпілотні фури не можуть працювати через технічні проблеми або зовнішні фактори, такі як аварії на дорозі або блокування шляхів руху.
LE-5: Випадки, коли відсутність або нестабільність Інтернет-з'єднання ускладнює обмін даними між системою управління та безпілотними фурами.
Ці обмеження та винятки важливо враховувати при розробці та експлуатації системи, а також розробляти стратегії їх управління для забезпечення найвищого рівня ефективності та надійності системи.


1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін


Таблиця 1 – Профілі зацікавлених сторін проєкту
Зацікавлена
Сторона	Головна
цінність	Ставлення	Головний
інтерес	Обмеження
Клієнти (логістичні компанії)	Ефективне управління рухом фур	Позитивне, бо впроваджується автоматизація процесів 	Оптимізація доставки, зменшення витрат	Вимоги до безпеки даних та конфіденційності

	Кінець таблиці 1
Технічна підтримка	Покращення ефективності та надійності системи	Нейтральне, тому що в їх роботі нічого не зміниться	Моніторинг стану фур, планування маршрутів	Наявність підтримки та технічної допомоги
ІТ-відділ компанії	Інтеграція з інфраструкту-рою клієнта	Позитивне, через розробку нового продукту	Автоматизація процесів, покращення комунікації	Сумісність з іншими системами та пристроями
Фінансовий відділ	Економічна доцільність	Нейтральне,бо на них не вплине 	Зниження часу доставки, підвищення точності	Вартість впровадження та підтримки системи
Юридичний відділ	Відповідність правовим нормам	Нейтральне,бо на них не вплине	Дотримання законодавства, уникнення штрафів	Регуляторні обмеження та вимоги


1.4.2	Пріоритети проєкту


Таблиця 2 – Пріоритети проєкту
Показник	Виконання	Обмеження	Ступінь свободи
Терміни реалізації проекту	12 місяців	Не більше 15 місяців	Від +2 місяців до  1 місяця від планового строку
Бюджет	$1,000,000	Не більше $1,200,000	До 10% зміни в
бюджеті
Ресурси	Мінімальне використання
зовнішніх ресурсів	Обмежена
доступність
спеціалістів та
обладнання	Можливість
залучення
додаткових
ресурсів за
потреби
Відсоток незавершеності проекту	0%	Не більше 5%	Від +1% до  1%  від зпланового




Кінець таблиці 2
Якість	Забезпечення
стабільної та
надійної роботи
системи	Відсутність
високих вимог до
якості та
надійності
системи	Збереження
стандартів якості
та надійності
Співпраця	Активне спілкування та
співпраця між командами	Різні часові зони
та мовні бар’єри	Забезпечення
ефективного
спілкування та
координації


1.4.3	Робоче середовище


Операційне середовище проекту буде побудоване на основі сучасних технологій і компонентів, що забезпечать ефективну розробку, високу безпеку та надійність системи. Серверна частина буде реалізована на платформі .NET з використанням фреймворку ASP.NET Core [2]. Цей вибір обумовлений потужними можливостями фреймворку для побудови веб-додатків і підтримкою сучасних стандартів розробки.
Для зберігання даних використовуватиметься NoSQL база даних MongoDB [3], що забезпечить гнучкість і масштабованість системи. Взаємодія з сервером буде здійснюватися за допомогою HTTP REST API [4], що дозволить ефективно обмінюватися даними між клієнтською та серверною частинами додатку.
Для забезпечення безпеки системи буде використано JWT-токени для аутентифікації та авторизації користувачів. Цей механізм забезпечить захист доступу до ресурсів і даних, зменшуючи ризики несанкціонованого доступу.
Веб-застосунок буде розроблений з використанням Angular. Використання Angular Material дозволить швидко і зручно додати стильове оформлення і компоненти інтерфейсу користувача.
Мобільний додаток буде розроблений на платформі Android Studio з використанням Flutter. Flutter забезпечить однаковий вигляд та функціональність на різних мобільних пристроях, що робить його ідеальним вибором для розробки мобільних додатків під різні платформи.
IoT система буде підтримуватися одноплатними комп'ютерами Raspberry Pi, які виконають роль контролерів. Мова програмування Python буде використовуватися для реалізації логіки і взаємодії з датчиками та іншими пристроями. Використання гео-локатора дозволить точно визначати місцезнаходження об'єктів і здійснювати відповідні дії на основі отриманих даних.
Для керування версіями коду, проєктним менеджментом та реалізації CI/CD процесів буде використано GitHub. Ця платформа забезпечить ефективний контроль версій і автоматизацію процесів розгортання змін.
Вибір Angular для реалізації веб-застосунку обумовлений його потужними можливостями і високою продуктивністю. Angular забезпечує масштабованість проєкту і високу швидкість роботи застосунку, що є критичними аспектами для сучасних веб-додатків.
Заходи забезпечення безпеки включатимуть в себе використання HTTPS для захищеної передачі даних, валідацію введених даних на клієнтській та серверній сторонах, регулярне оновлення застосунків для усунення вразливостей і моніторинг заходів безпеки системи.









2	ПОСТАНОВКА ЗАДАЧІ


Система "Smart Truck" має підтримувати наступне:
1.	Система користувачів. Будь-хто може зареєструватись у системі використовуючи пошту або номер телефон або обидва. Після створення облікового запису, користувач може використати пароль та логін для входу в систему. Також обліковий запис отримує роль “Користувач” і для отримання додаткових можливостей адміністрування може отримати додаткову роль “Адміністратор”.
2.	Операції з фурами. Користувач може додавати, видаляти, оновлювати фури, а також отримувати інформацію про фуру та список фур компанії.
3.	Оновлення та видалення облікового запису. Користувач може змінити особисту інформацію та пароль, а також може видалити свій обліковий запис.
4.	Адміністрування. Користувач з роллю “Адміністратор” може надати іншому користувачеві нову роль, або забрати вже існуючу. 
5.	Робота з замовленнями. Користувач може створити замовлення, почати його або закінчити. Також  користувач може отримати інформацію по замовленню та список замовлень компанії.
6.	Вибір найкращого замовлення. Якщо фура вільна, то користувач може підібрати найкраще замовлення з огляду на відстань між фурою та вантажем.
7.	Інформація про компанію. Користувач може отримати інформацію про певну компанію.
8.	Статистика. Для кожної компанії доступна статистика.
9.	Резервне копіювання. Користувач може отримати копію даних додатку у вигляді CSV-файлу. 

3	ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЄКТУ
3.1	Проектування серверної частини проєкту


Для зображення всіх фізичних компонентів системи, була розроблена діаграма розгортання на рисунку 1. Розглянемо кожен компонент окремо.
Серверна частина. Вона відповідає за зв’язок всіх елементів. Серверну частину було розроблено за допомогою платформи .NET. Це дозволило створити швидкий та легко-масштабований серверний додаток. Цей додаток включає в себе програмний код для роботи з базою даних, бізнес-логіку, захист та специфікацію REST Api.
База даних. У якості технології для бази даних було обрано Mongo Db саме через її структуру, яка завдяки документам, чудово впорається з великою кількістю даних. Для зв’язку з серверною частиною використовується MongoDb Driver через свою простоту та швидкість 
Мобільний додаток. Мовою програмування було обрано Flutter через можливість підтримувати багато платформ. Розробка для всіх приладів виконується лише раз. Взаємодія з серверною частиною виконується завдяки REST Api запитам.
IoT-пристрій. Представляє собою геолокатор, що передає дані про поточне місцезнаходження фури. Було обрано Raspberry Pi та мову програмування Python, через підтримку широкого спектру бібліотек, що дозволяє значно розширити можливості. Саме дані з локатора дозволяють в подальшому організовувати логістику автоматично. Взаємодія з серверною частиною через REST Api.
Веб-додаток. Розроблений за допомогою Angular та мови програмування TypeScrypt. Саме ці технології було обрано через використання компонентів Angular, що дозволяє створити додаток більш стабільним там швидким. Взаємодія з сервером – через REST Api запити. 
 
 

Рисунок 1 – UML діаграма розгортання

UML-діаграма прецедентів є інструментом моделювання, який використовується для візуалізації функціональності системи з точки зору користувача. UML-діаграму прецедентів зображено на рисунку 2.
Головний актор – користувач. Він може реєструватись та входити в систему. Також йому доступний перегляд статистики про компанію. Серед головних можливостей користувача – управління фурами та управління замовленнями. Для фур додавання фур, видалення та вибір найближчого замовлення, а також перегляд, створення, початок та завершення для замовлень дозволяє в повному обсязі використовувати систему.
Адміністратор має всі ті ж можливості, що й звичайний користувач, але додатково має можливість керувати користувачами, що дозволяє мати контроль над всіма елементами системи.
IoT-пристрій тільки оновлює дані в базі даних, а саме поточне місце фури. Це дозволяє забезпечити автоматизацію логістики. 
 
 

Рисунок 2 – UML діаграма прецедентів

	ER-діаграма є важливим інструментом при проектуванні баз даних. Вона надає можливість зрозуміти структуру даних та взаємозв'язки між різними об'єктами.
Розроблену діаграму наведено на рисунку 3. Створення цього графічного елементу це один з найголовніших етапів проектування. Під час розробки, програміст має мати уявлення про структуру даних та їх взаємодію в додатку, саме завдяки такій діаграмі він може розпочати розробку.
	На рисунку зображено зв’язки між таблицями виду один до одного, один до багатьох та багато до багатьох.
 
 
Рисунок 3 – ER діаграма

ER діаграма складається з шести компонентів, на базі яких було розроблено базу даних. 
Ці компоненти включають у себе:
1.	Користувачі.  Цей компонент представляє користувачів системи, він містить основні атрибути, такі як ім'я, електронна пошта, роль (user/admin), які визначають користувачів. Користувачі використовують систему для додавання книг до своєї полиці, оцінки книг, перегляду списку книг тощо.
2.	Автентифікаційний токен. Цей компонент відповідає за токени автентифікації, які використовуються для авторизації користувачів у системі. 
3.	Фура. Цей компонент представляє фуру компанії та відповідає за її інформацію та функціонал.
4.	Замовлення. Цей компонент містить інформацію про замовлення компанії та його характеристики.
5.	Компанія. Цей компонент відповідає за інформацію про компанію. 
6.	Ролі. Цей компонент представляє всі наявні ролі в системі (користувач, адміністратор і т.д.).
Завдяки гнучкості MongoDB, яка надає можливість зберігати зв’язані дані в колекції і використовувати вкладені об’єкти для представлення зв’язків між даними, працювати з даними можна набагато швидше.
Ця діаграма дозволяє детально зрозуміти, яким чином виконується певний процес. Це дозволяє повністю зрозуміти його роботи.
На рисунку 4 зображено діаграму діяльності для IoT-пристрою. Отже, спочатку пристрій отримує поточні координати, потім відправляє на серверну частину, де в свою чергу дані в базі оновлюються. Весь процес забезпечений валідацією та захистом від неправильного виконання.
 
 
Рисунок 4 – UML діаграма діяльності
4	КОДУВАННЯ ПРОГРАМНОГО ПРОЄКТУ
4.1	Кодування серверної частини проєкту


Для того, щоб система була надійна та стабільна, було застосовано багато практик та інженерних рішень.
	Архітектура серверної частини. У якості архітектури було обрано цибулеву або клин архітектуру. Перш за все, вона забезпечує безпека та стабільність, через те, що найвищі та найнижчі рівні на взаємодіють між собою.
	У якості системи авторизації та аутентифікації було обрано JWT tokens технологію. Їй була надана перевага, а також зберігання токену оновлення в базі даних, через можливість користувача користуватись як веб-додатком так і мобільним пристроєм. Таким чином користувачеві не потрібно кожного разу виконувати вхід наново.
	Серед правил програмування було використано принципи ООП, SOLID та DRY. Таким чином код значно зрозуміліший та простий. Також використовувались коментарі в місцях, де вони потрібні.
	В додатку також реалізована система власних помилок, які викликаються у тій чи іншій ситуації. Це дозволяє вільно керувати потоком виконання.
	В таблиці представлено специфікацію REST API для взаэмодії з серверним додатком.

Таблиця 3 – Специфікація REST API основного серверного додатку
Сутність	Метод	Посилання	Опис дії
Користувачі	GET	/users	Отримання сторінки користувачів
	POST	/users/register	Реєстрація користувача у системи
Продовження таблиці 3
		/users/login	Вхід користувача у систему
		/users/refresh	Оновлення токену доступу
		/users/{userId}/roles/{roleName}	Додавання ролі користувачу
	PUT	/users	Оновлення даних користувача
	DELETE	/users/{userId}/roles/{roleName}	Видалення ролі користувача
		/users/{userId}	Видалення користувача
Фури	GET	/trucks	Отримання сторінки фур
		/trucks/{truckId}	Отримання фури
		/trucks/takeOrder	Вибір найближчого замовлення
	POST	/trucks/create	Додавання фури
		/trucks/refresh	Оновлення позиції фури
	PUT	/trucks	Оновлення інформаціх про фуру
	DELETE	/trucks/{truckId}	Видалення фури
Замовлення	POST	/orders/create	Створення замовлення
		/orders/start	Початок замовлення
		/orders/end	Закінчення замовлення
	GET	/orders	Отримати сторінку замовлень
		/orders/{orderId}	Отримати 1 замовлення
Компанії	GET	/companies	Отримати сторінку компаній
		/companies/{companyId}	Отримати 1 компанію
		/companies/statistics	Отримати статистику по компанії

	Кінець таблиці 3
Експорт даних	GET	/export	Отримати резервну копію даних в csv файлі

	Для більш детального розуміння архітектури серверної частини додатку, створено рисунок 5 для ілюстрації рівнів та їх взаємодії. Окрім безпеки та стабільності, така структура забезпечує гарну масштабованість та простоту розуміння системи.

 
Рисунок 5 – Архітектура серверної частини






ВИСНОВКИ


На основі проведеного аналізу предметної області управління безпілотними фурами та обробки замовлень для транспортних компаній розроблено програмну систему "Smart Truck". Ця система забезпечує управління обліковими записами користувачів з різними ролями, управління фурами, обробку замовлень, вибір оптимальних замовлень, перегляд інформації про компанії, отримання статистики та резервне копіювання даних.	Розроблена система "Smart Truck" підтримує гнучке управління ролями, що дозволяє надавати користувачам права адміністратора для виконання додаткових операцій. Користувачі можуть додавати нові фури, видаляти існуючі, оновлювати інформацію про них і переглядати список фур компанії. Для роботи з замовленнями доступні функції створення, початку та завершення замовлень, а також перегляд інформації про них і списку всіх замовлень компанії. Система також дозволяє підбирати найкраще замовлення для фури, враховуючи відстань між фурою та вантажем, що оптимізує логістичні процеси. 
Ця розробка дозволяє оптимізувати процес управління флотом та замовленнями, знижуючи витрати на логістику та підвищуючи ефективність операцій. Система сприяє покращенню обслуговування клієнтів за рахунок зручного інтерфейсу і надає транспортним компаніям засоби для кращого планування і управління їх ресурсами. Вона допомагає підвищити ефективність планування маршрутів та логістичних операцій, тим самим збільшуючи загальну продуктивність компаній. Система є зручним інструментом як для невеликих компаній, так і для великих транспортних підприємств, сприяючи покращенню обслуговування клієнтів та оптимізації операційних процесів.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Документація Tesla Semi Truck. URL: https://www.tesla.com/semi (дата звернення 12.04.2024)
2.	Документація ASP.NET Core. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0 (дата звернення 20.04.2024)
3.	Документація MongoDB. URL: https://www.mongodb.com/docs/ (дата звернення 15.04.2024)
4.	Документація REST API. URL: https://docs.github.com/en/rest?apiVersion=2022-11-28 (дата звернення 28.04.2024)
5.	Документація Angular. URL: https://v17.angular.io/docs (дата звернення 02.05.2024)
6.	Вихідний код проєкту. URL: https://github.com/NureBilodidMykhailo/apzkr-pzpi-21-4-bilodid-mykhailo (дата звернення 02.06.2024)
7.	Відеозапис тестування створеного програмного коду. URL: https://youtu.be/VLWSTGoam5M (дата звернення 15.06.2024)












ДОДАТОК А
Код серверної частини


	Функція перетворення даних у CSV-файл
1 //Parsing from object to csv string
2 public static string ConvertToCsv<T>(IEnumerable<T> data)
3 {
4    var csv = new StringBuilder();
5
6    if (data == null || !data.Any())
7    {
8        return csv.ToString();
9    }
10
11    var properties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
12
13    csv.AppendLine(string.Join(",", properties.Select(p => p.Name)));
14
15    foreach (var item in data)
16    {
17        var values = properties.Select(p => p.GetValue(item)?.ToString() ?? string.Empty);
18        csv.AppendLine(string.Join(",", values));
19    }
20
21    return csv.ToString();
22 }

	Отримання статистики компанії 
1 // Gets statistics for all trucks in a specific company.
2 public async Task<List<TrucksStatisticsModel>> GetTrucksStatisticsAsync(string companyId, CancellationToken cancellationToken)
3 {
4    if (!ObjectId.TryParse(companyId, out var companyObjectId))
5    {
6        throw new InvalidDataException("Provided id is invalid.");
7    }
8
9    var company = await this._companiesRepository.GetOneAsync(companyObjectId, cancellationToken);
10    if (company == null)
11    {
12        throw new EntityNotFoundException<Company>();
13    }
14
15    var trucks = await this._trucksRepository.GetAllAsync(t => t.CompanyId == company.Id, cancellationToken);
16
17    var result = new List<TrucksStatisticsModel>();
18
19    foreach(var truck in trucks)
20    {
21        var orders = await this._ordersRepository.GetAllAsync(o => o.TruckId == truck.Id && o.Status == OrderStatus.Done, cancellationToken);
22        double fuelAmount = 0; 
23        foreach(var order in orders)
24        {
25            fuelAmount += DistanceCalculator.CalculateDistance(order.StartPlaceX, order.StartPlaceY, order.EndPlaceX, order.EndPlaceY) / 100 * truck.FuelСonsumption;
26        }
27
28        var statModel =  new TrucksStatisticsModel
29        {
30            TruckName = truck.Name,
31            DoneOrdersCount = orders.Count,
32            SpentFuel = fuelAmount,
33        };
34
35        result.Add(statModel);
36    }
37
38    return result;
39 }

	Отримання інформації про компанію
1 // Gets a single company by its ID.
2 public async Task<CompanyDto> GetCompanyAsync(string id, CancellationToken cancellationToken)
3 {
4    if (!ObjectId.TryParse(id, out var companyObjectId))
5    {
6        throw new InvalidDataException("Provided id is invalid.");
7    }
8
9    var company = await this._companiesRepository.GetOneAsync(companyObjectId, cancellationToken);
10    if (company == null)
11    {
12        throw new EntityNotFoundException<Company>();
13    }
14
15    return _mapper.Map<CompanyDto>(company);
16 }

